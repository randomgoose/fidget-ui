{
  "TimePicker": [
    {
      "name": "Time Picker",
      "type": null,
      "properties": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "A unique identifier for the time picker."
        },
        {
          "name": "value",
          "type": "Dayjs | string | Date",
          "required": false,
          "description": "The value of the time picker."
        },
        {
          "name": "onChange",
          "type": "(newValue: string) => void",
          "required": false,
          "description": "The change event handler."
        },
        {
          "name": "placement",
          "type": "'top' | 'bottom'",
          "required": false,
          "description": "The placement of the popper layer."
        },
        {
          "name": "style",
          "type": "CSSProperties",
          "required": false,
          "description": "节点样式"
        }
      ]
    }
  ],
  "TextField": [
    {
      "name": "Text Field",
      "type": null,
      "properties": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "A unique identifier of the text field."
        },
        {
          "name": "variant",
          "type": "'filled' | 'outline' | 'flush'",
          "required": false,
          "description": "The appearance of the text field.",
          "defaultValue": "'outline'"
        },
        {
          "name": "onClear",
          "type": "() => void",
          "required": false,
          "description": "The clear event handler triggers when clearing the content."
        },
        {
          "name": "size",
          "type": "'sm' | 'md' | 'lg'",
          "required": false,
          "description": "The size of the text field.",
          "defaultValue": "'md'"
        },
        {
          "name": "placeholder",
          "type": "string",
          "required": false,
          "description": "The content of the placeholder."
        },
        {
          "name": "elementLeft",
          "type": "FigmaDeclarativeNode",
          "required": false,
          "description": "The element on the left of the text field."
        },
        {
          "name": "elementRight",
          "type": "FigmaDeclarativeNode",
          "required": false,
          "description": "The element on the right of the text field."
        },
        {
          "name": "addonLeft",
          "type": "FigmaDeclarativeNode",
          "required": false,
          "description": "The addon to the left of the text field."
        },
        {
          "name": "addonRight",
          "type": "FigmaDeclarativeNode",
          "required": false,
          "description": "The element to the right of the text field."
        },
        {
          "name": "disabled",
          "type": "boolean",
          "required": false,
          "description": "If 'true', the text field is disabled."
        },
        {
          "name": "showClearIcon",
          "type": "boolean",
          "required": false,
          "description": "If 'true', the text field displays clear icon."
        },
        {
          "name": "style",
          "type": "CSSProperties",
          "required": false,
          "description": "节点样式"
        }
      ]
    }
  ],
  "Tag": [
    {
      "name": "Tag",
      "type": null,
      "properties": [
        {
          "name": "children",
          "type": "FigmaDeclarativeNode",
          "required": false,
          "description": "The content of the tag."
        },
        {
          "name": "variant",
          "type": "[TagVariant](#TagVariant)",
          "required": false,
          "description": "The appearance of the tag."
        },
        {
          "name": "style",
          "type": "[ComponentStyle](#ComponentStyle)<[TagAnatomy](#TagAnatomy), [TagSize](#TagSize), [TagVariant](#TagVariant)>",
          "required": false,
          "description": "The style object including all tag elements."
        },
        {
          "name": "colorScheme",
          "type": "[TagColorScheme](#TagColorScheme)",
          "required": false,
          "description": "Apply a preset color scheme to the tag."
        },
        {
          "name": "size",
          "type": "[TagSize](#TagSize)",
          "required": false,
          "description": "The size of the tag."
        },
        {
          "name": "dismissible",
          "type": "boolean",
          "required": false,
          "description": "If 'true', tags will contain a close button."
        },
        {
          "name": "leftIcon",
          "type": "SVG",
          "required": false,
          "description": "The icon to the left of the tag label."
        },
        {
          "name": "rightIcon",
          "type": "SVG",
          "required": false,
          "description": "The icon to the right of the tag label."
        },
        {
          "name": "onClose",
          "type": "() => void",
          "required": false,
          "description": "The close event handler."
        }
      ]
    },
    {
      "name": "TagVariant",
      "type": "export type TagVariant = 'solid' | 'subtle' | 'outline';\n",
      "properties": []
    },
    {
      "name": "ComponentStyle",
      "type": "export type ComponentStyle<PartsStyle = Record<string, any>, Size extends string = string, Variant extends string = string> = {\n  baseStyle?: Partial<PartsStyle>;\n  sizes?: Partial<Record<Size, Partial<PartsStyle>>>;\n  variants?: Partial<Record<Variant, Partial<PartsStyle>>>;\n};\n",
      "properties": []
    },
    {
      "name": "TagAnatomy",
      "type": "export type TagAnatomy = {\n  container: AutoLayoutProps;\n  label: TextProps;\n  closeButton: {\n    color: string;\n  };\n  icon: Omit<SVGProps, 'src'>;\n};\n",
      "properties": []
    },
    {
      "name": "TagSize",
      "type": "export type TagSize = 'sm' | 'md' | 'lg';\n",
      "properties": []
    },
    {
      "name": "TagColorScheme",
      "type": "export type TagColorScheme = 'neutral' | 'red' | 'orange' | 'amber' | 'yellow' | 'lime' | 'green' | 'emerald' | 'teal' | 'cyan' | 'sky' | 'blue' | 'indigo' | 'violet' | 'purple' | 'fuchsia' | 'pink' | 'rose';\n",
      "properties": []
    }
  ],
  "Tabs": [
    {
      "name": "Tab Pane",
      "type": null,
      "properties": [
        {
          "name": "key",
          "type": "string | number",
          "required": true,
          "description": "A unique identifier of the tab pane."
        },
        {
          "name": "tab",
          "type": "FigmaDeclarativeNode",
          "required": false,
          "description": "The title of the tab pane."
        },
        {
          "name": "children",
          "type": "FigmaDeclarativeNode",
          "required": false,
          "description": "The content of the tab pane."
        },
        {
          "name": "active",
          "type": "boolean",
          "required": false,
          "description": "If 'true', the content of the tab pane will be displayed."
        }
      ]
    },
    {
      "name": "Tabs",
      "type": null,
      "properties": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "A unique identifier of the tabs."
        },
        {
          "name": "style",
          "type": "[ComponentStyle](#ComponentStyle)<[TabsAnatomy](#TabsAnatomy), string, [TabsVariant](#TabsVariant)>",
          "required": false,
          "description": "The style object including all tabs parts."
        },
        {
          "name": "variant",
          "type": "[TabsVariant](#TabsVariant)",
          "required": false,
          "description": "The appearance of the tabs."
        },
        {
          "name": "colorScheme",
          "type": "[TabsColorScheme](#TabsColorScheme)",
          "required": false,
          "description": "Apply a preset color scheme to the tabs."
        },
        {
          "name": "defaultActiveKey",
          "type": "string | number",
          "required": false,
          "description": "The tab with the key is by default active."
        },
        {
          "name": "activeKey",
          "type": "string | number",
          "required": false,
          "description": "The active tab key (controlled)."
        },
        {
          "name": "isFitted",
          "type": "boolean",
          "required": false,
          "description": "If 'true', the tab list will fill the width of its parent element.",
          "defaultValue": "false"
        },
        {
          "name": "children",
          "type": "FigmaDeclarativeNode",
          "required": false,
          "description": "Child elements of the tabs."
        },
        {
          "name": "items",
          "type": "[TabPaneProps](#TabPaneProps)[]",
          "required": false,
          "description": "Tab panes and contents."
        },
        {
          "name": "onChange",
          "type": "(key: string | number) => Promise<void> | void",
          "required": false,
          "description": "The change event of the tabs."
        }
      ]
    },
    {
      "name": "ComponentStyle",
      "type": "export type ComponentStyle<PartsStyle = Record<string, any>, Size extends string = string, Variant extends string = string> = {\n  baseStyle?: Partial<PartsStyle>;\n  sizes?: Partial<Record<Size, Partial<PartsStyle>>>;\n  variants?: Partial<Record<Variant, Partial<PartsStyle>>>;\n};\n",
      "properties": []
    },
    {
      "name": "TabsAnatomy",
      "type": "export interface TabsAnatomy {\n  container: AutoLayoutProps;\n  tab: AutoLayoutProps;\n  activeTab: AutoLayoutProps;\n  activeTabLabel: TextProps;\n  tabList: AutoLayoutProps;\n  tabLabel: TextProps;\n  tabPanels: AutoLayoutProps;\n  tabPanel: AutoLayoutProps;\n}\n",
      "properties": []
    },
    {
      "name": "TabsVariant",
      "type": "export type TabsVariant = 'line' | 'enclosed' | 'soft-rounded' | 'solid-rounded';\n",
      "properties": []
    },
    {
      "name": "TabsColorScheme",
      "type": "export type TabsColorScheme = 'neutral' | 'red' | 'orange' | 'amber' | 'yellow' | 'lime' | 'green' | 'emerald' | 'teal' | 'cyan' | 'sky' | 'blue' | 'indigo' | 'violet' | 'purple' | 'fuchsia' | 'pink' | 'rose';\n",
      "properties": []
    }
  ],
  "Table": [
    {
      "name": "Table",
      "type": null,
      "properties": [
        {
          "name": "style",
          "type": "[ComponentStyle](#ComponentStyle)<[TableAnatomy](#TableAnatomy), string, string>",
          "required": false,
          "description": "The style object including all table elements."
        }
      ]
    },
    {
      "name": "ComponentStyle",
      "type": "export type ComponentStyle<PartsStyle = Record<string, any>, Size extends string = string, Variant extends string = string> = {\n  baseStyle?: Partial<PartsStyle>;\n  sizes?: Partial<Record<Size, Partial<PartsStyle>>>;\n  variants?: Partial<Record<Variant, Partial<PartsStyle>>>;\n};\n",
      "properties": []
    },
    {
      "name": "TableAnatomy",
      "type": "export interface TableAnatomy {\n  container: AutoLayoutProps;\n  cell: ElementProps;\n  head: ElementProps;\n  body: AutoLayoutProps;\n  header: AutoLayoutProps;\n  row: AutoLayoutProps;\n}\n",
      "properties": []
    }
  ],
  "Switch": [],
  "Stepper": [],
  "SimpleGrid": [
    {
      "name": "Simple Grid",
      "type": null,
      "properties": [
        {
          "name": "columns",
          "type": "number",
          "required": false,
          "description": "The number of columnes in the grid."
        },
        {
          "name": "spacing",
          "type": "number",
          "required": false,
          "description": "The spacing between grid cells."
        },
        {
          "name": "spacingX",
          "type": "number",
          "required": false,
          "description": "The spacing between grid cells in the x-axis."
        },
        {
          "name": "spacingY",
          "type": "number",
          "required": false,
          "description": "The spacing between grid cells in the y-axis."
        }
      ]
    }
  ],
  "Select": [
    {
      "name": "Select",
      "type": null,
      "properties": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "A unique identifier for the select."
        },
        {
          "name": "options",
          "type": "[OptionProps](#OptionProps)[]",
          "required": true,
          "description": "The options of the select."
        },
        {
          "name": "onChange",
          "type": "(selected: [OptionProps](#OptionProps)) => void",
          "required": false,
          "description": "The change event handler of the select."
        },
        {
          "name": "placement",
          "type": "'bottom' | 'top'",
          "required": false,
          "description": "The placement of the popper layer.",
          "defaultValue": "'bottom'"
        },
        {
          "name": "style",
          "type": "CSSProperties",
          "required": false,
          "description": "节点样式"
        }
      ]
    },
    {
      "name": "OptionProps",
      "type": "export type OptionProps = {\n  value: string;\n  label?: string;\n};\n",
      "properties": []
    }
  ],
  "Radio": [],
  "Notice": [],
  "Menu": [],
  "Heading": [],
  "Divider": [],
  "DescriptionList": [],
  "DatePicker": [],
  "Checkbox": [],
  "Card": [],
  "Button": [],
  "Avatar": [],
  "Accordion": [],
  "_field": []
}