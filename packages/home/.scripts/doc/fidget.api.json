{
  "TimePicker": [
    {
      "name": "Time Picker",
      "type": null,
      "properties": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "A unique identifier for the time picker."
        },
        {
          "name": "value",
          "type": "Dayjs | string | Date",
          "required": false,
          "description": "The value of the time picker."
        },
        {
          "name": "onChange",
          "type": "(newValue: string) => void",
          "required": false,
          "description": "The change event handler."
        },
        {
          "name": "placement",
          "type": "'top' | 'bottom'",
          "required": false,
          "description": "The placement of the popper layer."
        },
        {
          "name": "style",
          "type": "[ComponentStyle](#ComponentStyle)<[FieldAnatomy](#FieldAnatomy), [FieldSize](#FieldSize), [FieldVariant](#FieldVariant)>",
          "required": false,
          "description": "The style object for all field parts."
        },
        {
          "name": "variant",
          "type": "[FieldVariant](#FieldVariant)",
          "required": false,
          "description": "The appearance of the field."
        },
        {
          "name": "size",
          "type": "[FieldSize](#FieldSize)",
          "required": false,
          "description": "The size of the field.",
          "defaultValue": "'md'"
        },
        {
          "name": "placeholder",
          "type": "string",
          "required": false,
          "description": "The content of the placeholder."
        },
        {
          "name": "elementLeft",
          "type": "FigmaDeclarativeNode",
          "required": false,
          "description": "The element on the left side of the field."
        },
        {
          "name": "elementRight",
          "type": "FigmaDeclarativeNode",
          "required": false,
          "description": "The element on the right side of the field."
        },
        {
          "name": "addonLeft",
          "type": "FigmaDeclarativeNode",
          "required": false,
          "description": "The addon on the left side of the field."
        },
        {
          "name": "addonRight",
          "type": "FigmaDeclarativeNode",
          "required": false,
          "description": "The addon on the right side of the field."
        },
        {
          "name": "disabled",
          "type": "boolean",
          "required": false,
          "description": "If 'true', the field is disabled."
        }
      ]
    },
    {
      "name": "ComponentStyle",
      "type": "export type ComponentStyle<PartsStyle = Record<string, any>, Size extends string = string, Variant extends string = string> = {\n  baseStyle?: Partial<PartsStyle>;\n  sizes?: Partial<Record<Size, Partial<PartsStyle>>>;\n  variants?: Partial<Record<Variant, Partial<PartsStyle>>>;\n};\n",
      "properties": []
    },
    {
      "name": "FieldAnatomy",
      "type": "export interface FieldAnatomy {\n  field: AutoLayoutProps;\n  input: AutoLayoutProps;\n  text: TextProps;\n  clearIcon: Omit<SVGProps, 'src' | 'fill'> & {\n    color: string;\n  };\n  leftAddon: AutoLayoutProps;\n  rightAddon: AutoLayoutProps;\n  element: AutoLayoutProps;\n}\n",
      "properties": []
    },
    {
      "name": "FieldSize",
      "type": "type FieldSize = 'xs' | 'sm' | 'md' | 'lg';\n",
      "properties": []
    },
    {
      "name": "FieldVariant",
      "type": "type FieldVariant = 'filled' | 'outline' | 'flush';\n",
      "properties": []
    }
  ],
  "TextField": [
    {
      "name": "Text Field",
      "type": null,
      "properties": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "A unique identifier of the text field."
        },
        {
          "name": "variant",
          "type": "'filled' | 'outline' | 'flush'",
          "required": false,
          "description": "The appearance of the text field.",
          "defaultValue": "'outline'"
        },
        {
          "name": "onClear",
          "type": "() => void",
          "required": false,
          "description": "The clear event handler triggers when clearing the content."
        },
        {
          "name": "size",
          "type": "'sm' | 'md' | 'lg'",
          "required": false,
          "description": "The size of the text field.",
          "defaultValue": "'md'"
        },
        {
          "name": "placeholder",
          "type": "string",
          "required": false,
          "description": "The content of the placeholder."
        },
        {
          "name": "elementLeft",
          "type": "FigmaDeclarativeNode",
          "required": false,
          "description": "The element on the left of the text field."
        },
        {
          "name": "elementRight",
          "type": "FigmaDeclarativeNode",
          "required": false,
          "description": "The element on the right of the text field."
        },
        {
          "name": "addonLeft",
          "type": "FigmaDeclarativeNode",
          "required": false,
          "description": "The addon to the left of the text field."
        },
        {
          "name": "addonRight",
          "type": "FigmaDeclarativeNode",
          "required": false,
          "description": "The element to the right of the text field."
        },
        {
          "name": "disabled",
          "type": "boolean",
          "required": false,
          "description": "If 'true', the text field is disabled."
        },
        {
          "name": "showClearIcon",
          "type": "boolean",
          "required": false,
          "description": "If 'true', the text field displays clear icon."
        },
        {
          "name": "style",
          "type": "[ComponentStyle](#ComponentStyle)<[FieldAnatomy](#FieldAnatomy), [FieldSize](#FieldSize), [FieldVariant](#FieldVariant)>",
          "required": false,
          "description": "The style object for all field parts."
        }
      ]
    },
    {
      "name": "ComponentStyle",
      "type": "export type ComponentStyle<PartsStyle = Record<string, any>, Size extends string = string, Variant extends string = string> = {\n  baseStyle?: Partial<PartsStyle>;\n  sizes?: Partial<Record<Size, Partial<PartsStyle>>>;\n  variants?: Partial<Record<Variant, Partial<PartsStyle>>>;\n};\n",
      "properties": []
    },
    {
      "name": "FieldAnatomy",
      "type": "export interface FieldAnatomy {\n  field: AutoLayoutProps;\n  input: AutoLayoutProps;\n  text: TextProps;\n  clearIcon: Omit<SVGProps, 'src' | 'fill'> & {\n    color: string;\n  };\n  leftAddon: AutoLayoutProps;\n  rightAddon: AutoLayoutProps;\n  element: AutoLayoutProps;\n}\n",
      "properties": []
    },
    {
      "name": "FieldSize",
      "type": "type FieldSize = 'xs' | 'sm' | 'md' | 'lg';\n",
      "properties": []
    },
    {
      "name": "FieldVariant",
      "type": "type FieldVariant = 'filled' | 'outline' | 'flush';\n",
      "properties": []
    }
  ],
  "Tag": [
    {
      "name": "Tag",
      "type": null,
      "properties": [
        {
          "name": "children",
          "type": "FigmaDeclarativeNode",
          "required": false,
          "description": "The content of the tag."
        },
        {
          "name": "variant",
          "type": "[TagVariant](#TagVariant)",
          "required": false,
          "description": "The appearance of the tag."
        },
        {
          "name": "style",
          "type": "[ComponentStyle](#ComponentStyle)<[TagAnatomy](#TagAnatomy), [TagSize](#TagSize), [TagVariant](#TagVariant)>",
          "required": false,
          "description": "The style object including all tag elements."
        },
        {
          "name": "colorScheme",
          "type": "[TagColorScheme](#TagColorScheme)",
          "required": false,
          "description": "Apply a preset color scheme to the tag."
        },
        {
          "name": "size",
          "type": "[TagSize](#TagSize)",
          "required": false,
          "description": "The size of the tag."
        },
        {
          "name": "dismissible",
          "type": "boolean",
          "required": false,
          "description": "If 'true', tags will contain a close button."
        },
        {
          "name": "leftIcon",
          "type": "SVG",
          "required": false,
          "description": "The icon to the left of the tag label."
        },
        {
          "name": "rightIcon",
          "type": "SVG",
          "required": false,
          "description": "The icon to the right of the tag label."
        },
        {
          "name": "onClose",
          "type": "() => void",
          "required": false,
          "description": "The close event handler."
        }
      ]
    },
    {
      "name": "TagVariant",
      "type": "export type TagVariant = 'solid' | 'subtle' | 'outline';\n",
      "properties": []
    },
    {
      "name": "ComponentStyle",
      "type": "export type ComponentStyle<PartsStyle = Record<string, any>, Size extends string = string, Variant extends string = string> = {\n  baseStyle?: Partial<PartsStyle>;\n  sizes?: Partial<Record<Size, Partial<PartsStyle>>>;\n  variants?: Partial<Record<Variant, Partial<PartsStyle>>>;\n};\n",
      "properties": []
    },
    {
      "name": "TagAnatomy",
      "type": "export type TagAnatomy = {\n  container: AutoLayoutProps;\n  label: TextProps;\n  closeButton: {\n    color: string;\n  };\n  icon: Omit<SVGProps, 'src'>;\n};\n",
      "properties": []
    },
    {
      "name": "TagSize",
      "type": "export type TagSize = 'sm' | 'md' | 'lg';\n",
      "properties": []
    },
    {
      "name": "TagColorScheme",
      "type": "export type TagColorScheme = 'neutral' | 'red' | 'orange' | 'amber' | 'yellow' | 'lime' | 'green' | 'emerald' | 'teal' | 'cyan' | 'sky' | 'blue' | 'indigo' | 'violet' | 'purple' | 'fuchsia' | 'pink' | 'rose';\n",
      "properties": []
    }
  ],
  "Tabs": [
    {
      "name": "Tab Pane",
      "type": null,
      "properties": [
        {
          "name": "key",
          "type": "string | number",
          "required": true,
          "description": "A unique identifier of the tab pane."
        },
        {
          "name": "tab",
          "type": "FigmaDeclarativeNode",
          "required": false,
          "description": "The title of the tab pane."
        },
        {
          "name": "children",
          "type": "FigmaDeclarativeNode",
          "required": false,
          "description": "The content of the tab pane."
        },
        {
          "name": "active",
          "type": "boolean",
          "required": false,
          "description": "If 'true', the content of the tab pane will be displayed."
        }
      ]
    },
    {
      "name": "Tabs",
      "type": null,
      "properties": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "A unique identifier of the tabs."
        },
        {
          "name": "style",
          "type": "[ComponentStyle](#ComponentStyle)<[TabsAnatomy](#TabsAnatomy), string, [TabsVariant](#TabsVariant)>",
          "required": false,
          "description": "The style object including all tabs parts."
        },
        {
          "name": "variant",
          "type": "[TabsVariant](#TabsVariant)",
          "required": false,
          "description": "The appearance of the tabs."
        },
        {
          "name": "colorScheme",
          "type": "[TabsColorScheme](#TabsColorScheme)",
          "required": false,
          "description": "Apply a preset color scheme to the tabs."
        },
        {
          "name": "defaultActiveKey",
          "type": "string | number",
          "required": false,
          "description": "The tab with the key is by default active."
        },
        {
          "name": "activeKey",
          "type": "string | number",
          "required": false,
          "description": "The active tab key (controlled)."
        },
        {
          "name": "isFitted",
          "type": "boolean",
          "required": false,
          "description": "If 'true', the tab list will fill the width of its parent element.",
          "defaultValue": "false"
        },
        {
          "name": "children",
          "type": "FigmaDeclarativeNode",
          "required": false,
          "description": "Child elements of the tabs."
        },
        {
          "name": "items",
          "type": "[TabPaneProps](#TabPaneProps)[]",
          "required": false,
          "description": "Tab panes and contents."
        },
        {
          "name": "onChange",
          "type": "(key: string | number) => Promise<void> | void",
          "required": false,
          "description": "The change event of the tabs."
        }
      ]
    },
    {
      "name": "ComponentStyle",
      "type": "export type ComponentStyle<PartsStyle = Record<string, any>, Size extends string = string, Variant extends string = string> = {\n  baseStyle?: Partial<PartsStyle>;\n  sizes?: Partial<Record<Size, Partial<PartsStyle>>>;\n  variants?: Partial<Record<Variant, Partial<PartsStyle>>>;\n};\n",
      "properties": []
    },
    {
      "name": "TabsAnatomy",
      "type": "export interface TabsAnatomy {\n  container: AutoLayoutProps;\n  tab: AutoLayoutProps;\n  activeTab: AutoLayoutProps;\n  activeTabLabel: TextProps;\n  tabList: AutoLayoutProps;\n  tabLabel: TextProps;\n  tabPanels: AutoLayoutProps;\n  tabPanel: AutoLayoutProps;\n}\n",
      "properties": []
    },
    {
      "name": "TabsVariant",
      "type": "export type TabsVariant = 'line' | 'enclosed' | 'soft-rounded' | 'solid-rounded';\n",
      "properties": []
    },
    {
      "name": "TabsColorScheme",
      "type": "export type TabsColorScheme = 'neutral' | 'red' | 'orange' | 'amber' | 'yellow' | 'lime' | 'green' | 'emerald' | 'teal' | 'cyan' | 'sky' | 'blue' | 'indigo' | 'violet' | 'purple' | 'fuchsia' | 'pink' | 'rose';\n",
      "properties": []
    }
  ],
  "Table": [
    {
      "name": "Table",
      "type": null,
      "properties": [
        {
          "name": "style",
          "type": "[ComponentStyle](#ComponentStyle)<[TableAnatomy](#TableAnatomy), string, string>",
          "required": false,
          "description": "The style object including all table elements."
        }
      ]
    },
    {
      "name": "ComponentStyle",
      "type": "export type ComponentStyle<PartsStyle = Record<string, any>, Size extends string = string, Variant extends string = string> = {\n  baseStyle?: Partial<PartsStyle>;\n  sizes?: Partial<Record<Size, Partial<PartsStyle>>>;\n  variants?: Partial<Record<Variant, Partial<PartsStyle>>>;\n};\n",
      "properties": []
    },
    {
      "name": "TableAnatomy",
      "type": "export interface TableAnatomy {\n  container: AutoLayoutProps;\n  cell: ElementProps;\n  head: ElementProps;\n  body: AutoLayoutProps;\n  header: AutoLayoutProps;\n  row: AutoLayoutProps;\n}\n",
      "properties": []
    }
  ],
  "Switch": [
    {
      "name": "Switch",
      "type": null,
      "properties": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "A unique identifier of the switch."
        },
        {
          "name": "style",
          "type": "[ComponentStyle](#ComponentStyle)<[SwitchAnatomy](#SwitchAnatomy), [SwitchSize](#SwitchSize)>",
          "required": false,
          "description": "The style object for all switch parts."
        },
        {
          "name": "defaultChecked",
          "type": "boolean",
          "required": false,
          "description": "If 'true', the switch is by default checked."
        },
        {
          "name": "checked",
          "type": "boolean",
          "required": false,
          "description": "If 'true', the switch is checked."
        },
        {
          "name": "size",
          "type": "[SwitchSize](#SwitchSize)",
          "required": false,
          "description": "The size of the switch (T-shirt size).",
          "defaultValue": "'md'"
        },
        {
          "name": "colorScheme",
          "type": "[ColorScheme](#ColorScheme)",
          "required": false,
          "description": "Apply a preset color scheme to the switch."
        },
        {
          "name": "onChange",
          "type": "(value: boolean) => void",
          "required": false,
          "description": "The change event handler of the switch."
        },
        {
          "name": "disabled",
          "type": "boolean",
          "required": false,
          "description": "If 'true', the switch is disabled."
        }
      ]
    },
    {
      "name": "ComponentStyle",
      "type": "export type ComponentStyle<PartsStyle = Record<string, any>, Size extends string = string, Variant extends string = string> = {\n  baseStyle?: Partial<PartsStyle>;\n  sizes?: Partial<Record<Size, Partial<PartsStyle>>>;\n  variants?: Partial<Record<Variant, Partial<PartsStyle>>>;\n};\n",
      "properties": []
    },
    {
      "name": "SwitchAnatomy",
      "type": "export interface SwitchAnatomy {\n  container: AutoLayoutProps;\n  thumb: RectangleProps;\n}\n",
      "properties": []
    },
    {
      "name": "SwitchSize",
      "type": "export type SwitchSize = 'sm' | 'md' | 'lg';\n",
      "properties": []
    },
    {
      "name": "ColorScheme",
      "type": "export type ColorScheme = 'slate' | 'gray' | 'zinc' | 'neutral' | 'stone' | 'red' | 'orange' | 'amber' | 'yellow' | 'lime' | 'green' | 'emerald' | 'teal' | 'cyan' | 'sky' | 'blue' | 'indigo' | 'violet' | 'purple' | 'fuchsia' | 'pink' | 'rose';\n",
      "properties": []
    }
  ],
  "Stepper": [
    {
      "name": "Stepper",
      "type": null,
      "properties": [
        {
          "name": "style",
          "type": "[ComponentStyle](#ComponentStyle)<[StepperAnatomy](#StepperAnatomy), [StepperSize](#StepperSize)>",
          "required": false,
          "description": "The style object including all stepper parts."
        },
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "A unique identifier for the stepper."
        },
        {
          "name": "value",
          "type": "number",
          "required": false,
          "description": "The controlled value of the stepper."
        },
        {
          "name": "defaultValue",
          "type": "number",
          "required": false,
          "description": "The default value of the stepper (uncontrolled)."
        },
        {
          "name": "size",
          "type": "[StepperSize](#StepperSize)",
          "required": false,
          "description": "The size of the stepper (T-shirt size)."
        },
        {
          "name": "step",
          "type": "number",
          "required": false,
          "description": "The step each time the stepper increments / decrements."
        },
        {
          "name": "max",
          "type": "number",
          "required": false,
          "description": "The upper limit of the range."
        },
        {
          "name": "min",
          "type": "number",
          "required": false,
          "description": "The lower limit of the range."
        },
        {
          "name": "disabled",
          "type": "boolean",
          "required": false,
          "description": "If 'true', the stepper is disabled."
        },
        {
          "name": "onChange",
          "type": "(nextValue: number) => void",
          "required": false,
          "description": "The change event handler."
        },
        {
          "name": "onIncrement",
          "type": "(nextValue: number) => void",
          "required": false,
          "description": "The increment event handler."
        },
        {
          "name": "onDecrement",
          "type": "(nextValue: number) => void",
          "required": false,
          "description": "The decrement event handler."
        },
        {
          "name": "precision",
          "type": "number",
          "required": false,
          "description": "The number of decimal points used to round the value."
        }
      ]
    },
    {
      "name": "ComponentStyle",
      "type": "export type ComponentStyle<PartsStyle = Record<string, any>, Size extends string = string, Variant extends string = string> = {\n  baseStyle?: Partial<PartsStyle>;\n  sizes?: Partial<Record<Size, Partial<PartsStyle>>>;\n  variants?: Partial<Record<Variant, Partial<PartsStyle>>>;\n};\n",
      "properties": []
    },
    {
      "name": "StepperAnatomy",
      "type": "export interface StepperAnatomy {\n  field: Omit<InputProps, 'value' | 'onTextEditEnd'>;\n  incrementButton: IconButtonProps;\n  decrementButton: IconButtonProps;\n}\n",
      "properties": []
    },
    {
      "name": "StepperSize",
      "type": "export type StepperSize = 'sm' | 'md' | 'lg';\n",
      "properties": []
    }
  ],
  "SimpleGrid": [
    {
      "name": "Simple Grid",
      "type": null,
      "properties": [
        {
          "name": "columns",
          "type": "number",
          "required": false,
          "description": "The number of columnes in the grid."
        },
        {
          "name": "spacing",
          "type": "number",
          "required": false,
          "description": "The spacing between grid cells."
        },
        {
          "name": "spacingX",
          "type": "number",
          "required": false,
          "description": "The spacing between grid cells in the x-axis."
        },
        {
          "name": "spacingY",
          "type": "number",
          "required": false,
          "description": "The spacing between grid cells in the y-axis."
        }
      ]
    }
  ],
  "Select": [
    {
      "name": "Select",
      "type": null,
      "properties": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "A unique identifier for the select."
        },
        {
          "name": "options",
          "type": "[OptionProps](#OptionProps)[]",
          "required": true,
          "description": "The options of the select."
        },
        {
          "name": "onChange",
          "type": "(selected: [OptionProps](#OptionProps)) => void",
          "required": false,
          "description": "The change event handler of the select."
        },
        {
          "name": "placement",
          "type": "'bottom' | 'top'",
          "required": false,
          "description": "The placement of the popper layer.",
          "defaultValue": "'bottom'"
        },
        {
          "name": "style",
          "type": "[ComponentStyle](#ComponentStyle)<[FieldAnatomy](#FieldAnatomy), [FieldSize](#FieldSize), [FieldVariant](#FieldVariant)>",
          "required": false,
          "description": "The style object for all field parts."
        },
        {
          "name": "variant",
          "type": "[FieldVariant](#FieldVariant)",
          "required": false,
          "description": "The appearance of the field."
        },
        {
          "name": "size",
          "type": "[FieldSize](#FieldSize)",
          "required": false,
          "description": "The size of the field.",
          "defaultValue": "'md'"
        },
        {
          "name": "placeholder",
          "type": "string",
          "required": false,
          "description": "The content of the placeholder."
        },
        {
          "name": "elementLeft",
          "type": "FigmaDeclarativeNode",
          "required": false,
          "description": "The element on the left side of the field."
        },
        {
          "name": "elementRight",
          "type": "FigmaDeclarativeNode",
          "required": false,
          "description": "The element on the right side of the field."
        },
        {
          "name": "addonLeft",
          "type": "FigmaDeclarativeNode",
          "required": false,
          "description": "The addon on the left side of the field."
        },
        {
          "name": "addonRight",
          "type": "FigmaDeclarativeNode",
          "required": false,
          "description": "The addon on the right side of the field."
        },
        {
          "name": "disabled",
          "type": "boolean",
          "required": false,
          "description": "If 'true', the field is disabled."
        }
      ]
    },
    {
      "name": "OptionProps",
      "type": "export type OptionProps = {\n  value: string;\n  label?: string;\n};\n",
      "properties": []
    },
    {
      "name": "ComponentStyle",
      "type": "export type ComponentStyle<PartsStyle = Record<string, any>, Size extends string = string, Variant extends string = string> = {\n  baseStyle?: Partial<PartsStyle>;\n  sizes?: Partial<Record<Size, Partial<PartsStyle>>>;\n  variants?: Partial<Record<Variant, Partial<PartsStyle>>>;\n};\n",
      "properties": []
    },
    {
      "name": "FieldAnatomy",
      "type": "export interface FieldAnatomy {\n  field: AutoLayoutProps;\n  input: AutoLayoutProps;\n  text: TextProps;\n  clearIcon: Omit<SVGProps, 'src' | 'fill'> & {\n    color: string;\n  };\n  leftAddon: AutoLayoutProps;\n  rightAddon: AutoLayoutProps;\n  element: AutoLayoutProps;\n}\n",
      "properties": []
    },
    {
      "name": "FieldSize",
      "type": "type FieldSize = 'xs' | 'sm' | 'md' | 'lg';\n",
      "properties": []
    },
    {
      "name": "FieldVariant",
      "type": "type FieldVariant = 'filled' | 'outline' | 'flush';\n",
      "properties": []
    }
  ],
  "Radio": [
    {
      "name": "Radio",
      "type": null,
      "properties": [
        {
          "name": "style",
          "type": "[ComponentStyle](#ComponentStyle)<[RadioAnatomy](#RadioAnatomy)>",
          "required": false,
          "description": "The style object including all radio elements."
        },
        {
          "name": "value",
          "type": "string",
          "required": true,
          "description": "The value of the radio."
        },
        {
          "name": "children",
          "type": "FigmaDeclarativeNode",
          "required": false,
          "description": "The label of the radio."
        },
        {
          "name": "disabled",
          "type": "boolean",
          "required": false,
          "description": "If 'true', the radio is disabled."
        },
        {
          "name": "checked",
          "type": "boolean",
          "required": false,
          "description": "If 'true', the radio is checked."
        },
        {
          "name": "onClick",
          "type": "(value: string) => void",
          "required": false,
          "description": "The click event."
        }
      ]
    },
    {
      "name": "Radio Group",
      "type": null,
      "properties": [
        {
          "name": "name",
          "type": "string",
          "required": true,
          "description": "The name of the radio group. It is used as the key of the component state."
        },
        {
          "name": "value",
          "type": "string",
          "required": false,
          "description": "The selected value of the radio group."
        },
        {
          "name": "options",
          "type": "[Option](#Option)[]",
          "required": false,
          "description": "The data objects of the radios wrapped."
        },
        {
          "name": "children",
          "type": "FigmaDeclarativeNode",
          "required": false,
          "description": "The children elements wrapped in the radio group."
        },
        {
          "name": "orientation",
          "type": "'vertical' | 'horizontal'",
          "required": false,
          "description": "The orientation of the radio group."
        },
        {
          "name": "spacing",
          "type": "number",
          "required": false,
          "description": "The spacing between the radios wrapped."
        },
        {
          "name": "onChange",
          "type": "(option: [Option](#Option)) => void",
          "required": false,
          "description": "The change event."
        },
        {
          "name": "render",
          "type": "({ checked, option }: {checked: boolean;option: [Option](#Option);}) => FigmaDeclarativeNode",
          "required": false,
          "description": "The render function takes the data and returns a custom component instead of the default checkbox."
        }
      ]
    },
    {
      "name": "ComponentStyle",
      "type": "export type ComponentStyle<PartsStyle = Record<string, any>, Size extends string = string, Variant extends string = string> = {\n  baseStyle?: Partial<PartsStyle>;\n  sizes?: Partial<Record<Size, Partial<PartsStyle>>>;\n  variants?: Partial<Record<Variant, Partial<PartsStyle>>>;\n};\n",
      "properties": []
    },
    {
      "name": "RadioAnatomy",
      "type": "export interface RadioAnatomy {\n  control: AutoLayoutProps;\n  label: TextProps;\n  container: AutoLayoutProps;\n  ink: Partial<RectangleProps>;\n}\n",
      "properties": []
    },
    {
      "name": "Option",
      "type": "export type Option = {\n  value: string;\n  label?: FigmaDeclarativeNode;\n  disabled?: boolean;\n};\n",
      "properties": []
    }
  ],
  "Notice": [
    {
      "name": "Notice",
      "type": null,
      "properties": [
        {
          "name": "style",
          "type": "[ComponentStyle](#ComponentStyle)<[NoticeAnatomy](#NoticeAnatomy), string, [NoticeVariant](#NoticeVariant)>",
          "required": false,
          "description": "The style object including all notice parts.",
          "defaultValue": "true"
        },
        {
          "name": "icon",
          "type": "FigmaDeclarativeNode | boolean",
          "required": false,
          "description": "If 'false', hide the preset icon. Or replace the default icon with a custom one.",
          "defaultValue": "true"
        },
        {
          "name": "title",
          "type": "FigmaDeclarativeNode",
          "required": false,
          "description": "The title of the notice."
        },
        {
          "name": "description",
          "type": "FigmaDeclarativeNode",
          "required": false,
          "description": "The description of the notice."
        },
        {
          "name": "status",
          "type": "[NoticeStatus](#NoticeStatus)",
          "required": false,
          "description": "The status of the notice.",
          "defaultValue": "'info'"
        },
        {
          "name": "variant",
          "type": "[NoticeVariant](#NoticeVariant)",
          "required": false,
          "description": "The apperance of the notice.",
          "defaultValue": "'subtle'"
        },
        {
          "name": "children",
          "type": "FigmaDeclarativeNode",
          "required": false,
          "description": "Other child elements of the notice."
        }
      ]
    },
    {
      "name": "ComponentStyle",
      "type": "export type ComponentStyle<PartsStyle = Record<string, any>, Size extends string = string, Variant extends string = string> = {\n  baseStyle?: Partial<PartsStyle>;\n  sizes?: Partial<Record<Size, Partial<PartsStyle>>>;\n  variants?: Partial<Record<Variant, Partial<PartsStyle>>>;\n};\n",
      "properties": []
    },
    {
      "name": "NoticeAnatomy",
      "type": "export interface NoticeAnatomy {\n  container: AutoLayoutProps;\n  title: TextProps;\n  description: TextProps;\n  icon: Omit<SVGProps, 'src'>;\n}\n",
      "properties": []
    },
    {
      "name": "NoticeVariant",
      "type": "export type NoticeVariant = 'subtle' | 'solid';\n",
      "properties": []
    },
    {
      "name": "NoticeStatus",
      "type": "export type NoticeStatus = 'info' | 'error' | 'warning' | 'success';\n",
      "properties": []
    }
  ],
  "Menu": [
    {
      "name": "Menu Item",
      "type": null,
      "properties": [
        {
          "name": "style",
          "type": "[ComponentStyle](#ComponentStyle)<[MenuAnatomy](#MenuAnatomy)['item']>",
          "required": false,
          "description": "The style object including all menu item parts."
        },
        {
          "name": "type",
          "type": "'item'",
          "required": false,
          "description": "The type of the menu item."
        },
        {
          "name": "children",
          "type": "FigmaDeclarativeNode",
          "required": false,
          "description": "The content of the menu item."
        },
        {
          "name": "icon",
          "type": "FigmaDeclarativeNode",
          "required": false,
          "description": "The icon of the menu item."
        },
        {
          "name": "disabled",
          "type": "boolean",
          "required": false,
          "description": "If 'true', the menu item is disabled."
        },
        {
          "name": "color",
          "type": "TextProps['stroke']",
          "required": false,
          "description": "The color of the text in the menu item."
        },
        {
          "name": "onClick",
          "type": "(e: WidgetClickEvent) => void",
          "required": false,
          "description": "The click event."
        }
      ]
    },
    {
      "name": "Menu",
      "type": null,
      "properties": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "A unique identifier ot the Menu."
        },
        {
          "name": "style",
          "type": "[ComponentStyle](#ComponentStyle)<[MenuAnatomy](#MenuAnatomy)>",
          "required": false,
          "description": "The style object including all menu parts."
        },
        {
          "name": "trigger",
          "type": "FigmaDeclarativeNode",
          "required": false,
          "description": "The custom menu trigger element."
        },
        {
          "name": "children",
          "type": "FigmaDeclarativeNode",
          "required": false,
          "description": "The custom elements wrapped in the menu."
        },
        {
          "name": "items",
          "type": "([MenuItemProps](#MenuItemProps) | [MenuDividerProps](#MenuDividerProps))[]",
          "required": false,
          "description": "The data objects of menu items."
        },
        {
          "name": "placement",
          "type": "'bottom' | 'top' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end'",
          "required": false,
          "description": "The placement of the menu list."
        }
      ]
    },
    {
      "name": "ComponentStyle",
      "type": "export type ComponentStyle<PartsStyle = Record<string, any>, Size extends string = string, Variant extends string = string> = {\n  baseStyle?: Partial<PartsStyle>;\n  sizes?: Partial<Record<Size, Partial<PartsStyle>>>;\n  variants?: Partial<Record<Variant, Partial<PartsStyle>>>;\n};\n",
      "properties": []
    },
    {
      "name": "MenuAnatomy",
      "type": "export interface MenuAnatomy {\n  container: AutoLayoutProps;\n  list: AutoLayoutProps;\n  item: ElementProps;\n  icon: Omit<SVGProps, 'src'>;\n  chevron: Omit<SVGProps, 'src'> & {\n    color: string;\n  };\n  locator: AutoLayoutProps;\n  trigger: ElementProps;\n  divider: AutoLayoutProps;\n}\n",
      "properties": []
    },
    {
      "name": "ComponentStyle",
      "type": "export type ComponentStyle<PartsStyle = Record<string, any>, Size extends string = string, Variant extends string = string> = {\n  baseStyle?: Partial<PartsStyle>;\n  sizes?: Partial<Record<Size, Partial<PartsStyle>>>;\n  variants?: Partial<Record<Variant, Partial<PartsStyle>>>;\n};\n",
      "properties": []
    },
    {
      "name": "MenuDividerProps",
      "type": "export interface MenuDividerProps extends DividerProps {\n  type: 'divider';\n}\n",
      "properties": []
    }
  ],
  "Heading": [],
  "Divider": [
    {
      "name": "Divider",
      "type": null,
      "properties": [
        {
          "name": "style",
          "type": "[ComponentStyle](#ComponentStyle)<[DividerAnatomy](#DividerAnatomy)>",
          "required": false,
          "description": "The style object including all divider parts."
        },
        {
          "name": "orientation",
          "type": "'vertical' | 'horizontal'",
          "required": false,
          "description": "The orientation of the divider."
        },
        {
          "name": "children",
          "type": "FigmaDeclarativeNode",
          "required": false,
          "description": "The elements between dividers."
        },
        {
          "name": "margin",
          "type": "AutoLayoutProps['padding']",
          "required": false,
          "description": "The margins around the divider."
        },
        {
          "name": "stroke",
          "type": "RectangleProps['fill']",
          "required": false,
          "description": "The color of the divider."
        }
      ]
    },
    {
      "name": "ComponentStyle",
      "type": "export type ComponentStyle<PartsStyle = Record<string, any>, Size extends string = string, Variant extends string = string> = {\n  baseStyle?: Partial<PartsStyle>;\n  sizes?: Partial<Record<Size, Partial<PartsStyle>>>;\n  variants?: Partial<Record<Variant, Partial<PartsStyle>>>;\n};\n",
      "properties": []
    },
    {
      "name": "DividerAnatomy",
      "type": "export interface DividerAnatomy {\n  container: AutoLayoutProps;\n  text: TextProps;\n  divider: AutoLayoutProps;\n}\n",
      "properties": []
    }
  ],
  "DescriptionList": [
    {
      "name": "Description List",
      "type": null,
      "properties": [
        {
          "name": "style",
          "type": "[ComponentStyle](#ComponentStyle)<[DescriptionListAnatomy](#DescriptionListAnatomy)>",
          "required": false,
          "description": "The style object including all description list parts."
        },
        {
          "name": "items",
          "type": "[DescriptionListItem](#DescriptionListItem)[]",
          "required": false,
          "description": "The description list entries."
        }
      ]
    },
    {
      "name": "ComponentStyle",
      "type": "export type ComponentStyle<PartsStyle = Record<string, any>, Size extends string = string, Variant extends string = string> = {\n  baseStyle?: Partial<PartsStyle>;\n  sizes?: Partial<Record<Size, Partial<PartsStyle>>>;\n  variants?: Partial<Record<Variant, Partial<PartsStyle>>>;\n};\n",
      "properties": []
    },
    {
      "name": "DescriptionListAnatomy",
      "type": "export interface DescriptionListAnatomy {\n  container: AutoLayoutProps;\n  item: AutoLayoutProps;\n  label: TextProps;\n  value: TextProps;\n}\n",
      "properties": []
    },
    {
      "name": "DescriptionListItem",
      "type": "export type DescriptionListItem = {\n  label: string;\n  value: FigmaDeclarativeNode;\n};\n",
      "properties": []
    }
  ],
  "DatePicker": [
    {
      "name": "DatePicker",
      "type": null,
      "properties": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "A unique identifier for the date picker."
        },
        {
          "name": "style",
          "type": "[ComponentStyle](#ComponentStyle)<[DatePickerAnatomy](#DatePickerAnatomy)>",
          "required": false,
          "description": "The style object inlcuding all date picker parts."
        },
        {
          "name": "date",
          "type": "[DateType](#DateType)",
          "required": false,
          "description": "The selected date."
        },
        {
          "name": "onChange",
          "type": "(date: Date) => void",
          "required": false,
          "description": "The change event of the date."
        },
        {
          "name": "placement",
          "type": "'bottom' | 'top' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end'",
          "required": false,
          "description": "The placement of the popper layer."
        },
        {
          "name": "format",
          "type": "string",
          "required": false,
          "description": "The date format."
        },
        {
          "name": "variant",
          "type": "[FieldVariant](#FieldVariant)",
          "required": false,
          "description": "The appearance of the field."
        },
        {
          "name": "size",
          "type": "[FieldSize](#FieldSize)",
          "required": false,
          "description": "The size of the field.",
          "defaultValue": "'md'"
        },
        {
          "name": "placeholder",
          "type": "string",
          "required": false,
          "description": "The content of the placeholder."
        },
        {
          "name": "elementLeft",
          "type": "FigmaDeclarativeNode",
          "required": false,
          "description": "The element on the left side of the field."
        },
        {
          "name": "elementRight",
          "type": "FigmaDeclarativeNode",
          "required": false,
          "description": "The element on the right side of the field."
        },
        {
          "name": "addonLeft",
          "type": "FigmaDeclarativeNode",
          "required": false,
          "description": "The addon on the left side of the field."
        },
        {
          "name": "addonRight",
          "type": "FigmaDeclarativeNode",
          "required": false,
          "description": "The addon on the right side of the field."
        },
        {
          "name": "disabled",
          "type": "boolean",
          "required": false,
          "description": "If 'true', the field is disabled."
        }
      ]
    },
    {
      "name": "ComponentStyle",
      "type": "export type ComponentStyle<PartsStyle = Record<string, any>, Size extends string = string, Variant extends string = string> = {\n  baseStyle?: Partial<PartsStyle>;\n  sizes?: Partial<Record<Size, Partial<PartsStyle>>>;\n  variants?: Partial<Record<Variant, Partial<PartsStyle>>>;\n};\n",
      "properties": []
    },
    {
      "name": "DatePickerAnatomy",
      "type": "export interface DatePickerAnatomy {\n  container: AutoLayoutProps;\n  calendar: AutoLayoutProps;\n  row: AutoLayoutProps;\n  controls: AutoLayoutProps;\n  weekday: AutoLayoutProps;\n  cell: AutoLayoutProps;\n  digit: TextProps;\n  indicator: EllipseProps;\n}\n",
      "properties": []
    },
    {
      "name": "DateType",
      "type": "export type DateType = Date | Dayjs | string;\n",
      "properties": []
    },
    {
      "name": "FieldVariant",
      "type": "type FieldVariant = 'filled' | 'outline' | 'flush';\n",
      "properties": []
    },
    {
      "name": "FieldSize",
      "type": "type FieldSize = 'xs' | 'sm' | 'md' | 'lg';\n",
      "properties": []
    }
  ],
  "ConfigProvider": [],
  "Checkbox": [
    {
      "name": "Checkbox",
      "type": null,
      "properties": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "A unique identifier for the checkbox."
        },
        {
          "name": "style",
          "type": "[ComponentStyle](#ComponentStyle)<[CheckboxAnatomy](#CheckboxAnatomy)>",
          "required": false,
          "description": "The style object for all checkbox parts."
        },
        {
          "name": "colorScheme",
          "type": "[ColorScheme](#ColorScheme)",
          "required": false,
          "description": "Apply a preset color scheme to the checkbox."
        },
        {
          "name": "checked",
          "type": "boolean",
          "required": false,
          "description": "If 'true', the checkbox is checked."
        },
        {
          "name": "children",
          "type": "FigmaDeclarativeNode",
          "required": false,
          "description": "The label of the checkbox."
        },
        {
          "name": "disabled",
          "type": "boolean",
          "required": false,
          "description": "If 'true', the checkbox is disabled."
        },
        {
          "name": "onChange",
          "type": "(checked: boolean) => void",
          "required": false,
          "description": "The change event of the checkbox."
        }
      ]
    },
    {
      "name": "Checkbox Group",
      "type": null,
      "properties": [
        {
          "name": "name",
          "type": "string",
          "required": true,
          "description": "The category of checkboxes wrapped. It is used as a key for the component state."
        },
        {
          "name": "options",
          "type": "[Option](#Option)[]",
          "required": false,
          "description": "The data objects of checkboxes wrapped."
        },
        {
          "name": "orientation",
          "type": "'vertical' | 'horizontal'",
          "required": false,
          "description": "The direction of checkboxes wrapped.",
          "defaultValue": "'horizontal'"
        },
        {
          "name": "spacing",
          "type": "number",
          "required": false,
          "description": "The spacing between checkboxes wrapped."
        },
        {
          "name": "onChange",
          "type": "(option: [Option](#Option)) => void",
          "required": false,
          "description": "The change event."
        },
        {
          "name": "children",
          "type": "FigmaDeclarativeChildren<[CheckboxProps](#CheckboxProps)>",
          "required": false,
          "description": "The other custom elements wrapped in the group."
        },
        {
          "name": "render",
          "type": "({ checked, option }: {checked: boolean;option: [Option](#Option);}) => FigmaDeclarativeNode",
          "required": false,
          "description": "The render function takes the data and returns a custom component instead of the default checkbox."
        }
      ]
    },
    {
      "name": "ComponentStyle",
      "type": "export type ComponentStyle<PartsStyle = Record<string, any>, Size extends string = string, Variant extends string = string> = {\n  baseStyle?: Partial<PartsStyle>;\n  sizes?: Partial<Record<Size, Partial<PartsStyle>>>;\n  variants?: Partial<Record<Variant, Partial<PartsStyle>>>;\n};\n",
      "properties": []
    },
    {
      "name": "CheckboxAnatomy",
      "type": "export interface CheckboxAnatomy {\n  control: AutoLayoutProps;\n  container: AutoLayoutProps;\n  label: TextProps;\n  ink: Omit<SVGProps, 'src'> & {\n    color: SVGProps['fill'];\n  };\n}\n",
      "properties": []
    },
    {
      "name": "ColorScheme",
      "type": "export type ColorScheme = 'slate' | 'gray' | 'zinc' | 'neutral' | 'stone' | 'red' | 'orange' | 'amber' | 'yellow' | 'lime' | 'green' | 'emerald' | 'teal' | 'cyan' | 'sky' | 'blue' | 'indigo' | 'violet' | 'purple' | 'fuchsia' | 'pink' | 'rose';\n",
      "properties": []
    },
    {
      "name": "Option",
      "type": "export type Option = {\n  value: string;\n  label?: FigmaDeclarativeNode;\n  disabled?: boolean;\n};\n",
      "properties": []
    }
  ],
  "Card": [
    {
      "name": "Card",
      "type": null,
      "properties": [
        {
          "name": "style",
          "type": "[ComponentStyle](#ComponentStyle)<[CardAnatomy](#CardAnatomy)>",
          "required": false,
          "description": "The style object for all card components."
        }
      ]
    },
    {
      "name": "ComponentStyle",
      "type": "export type ComponentStyle<PartsStyle = Record<string, any>, Size extends string = string, Variant extends string = string> = {\n  baseStyle?: Partial<PartsStyle>;\n  sizes?: Partial<Record<Size, Partial<PartsStyle>>>;\n  variants?: Partial<Record<Variant, Partial<PartsStyle>>>;\n};\n",
      "properties": []
    },
    {
      "name": "CardAnatomy",
      "type": "export type CardAnatomy = {\n  container: AutoLayoutProps;\n  header: ElementProps;\n  body: ElementProps;\n  footer: ElementProps;\n};\n",
      "properties": []
    }
  ],
  "Button": [
    {
      "name": "Button",
      "type": null,
      "properties": [
        {
          "name": "children",
          "type": "string",
          "required": true,
          "description": "The inner text of the button."
        },
        {
          "name": "style",
          "type": "[ComponentStyle](#ComponentStyle)<[ButtonAnatomy](#ButtonAnatomy), [ButtonSize](#ButtonSize), [ButtonVariant](#ButtonVariant)>",
          "required": false,
          "description": "The style object including all parts of the button."
        },
        {
          "name": "variant",
          "type": "[ButtonVariant](#ButtonVariant)",
          "required": false,
          "description": "The appearance of the button.",
          "defaultValue": "'filled'"
        },
        {
          "name": "colorScheme",
          "type": "[ButtonColorScheme](#ButtonColorScheme)",
          "required": false,
          "description": "Apply a preset color scheme to the button."
        },
        {
          "name": "size",
          "type": "[ButtonSize](#ButtonSize)",
          "required": false,
          "description": "The size of the button (T-shirt size).",
          "defaultValue": "'md'"
        },
        {
          "name": "disabled",
          "type": "boolean",
          "required": false,
          "description": "If 'true', the button and its events will be disabled."
        },
        {
          "name": "leftIcon",
          "type": "FigmaDeclarativeNode",
          "required": false,
          "description": "The icon to the left of the button label."
        },
        {
          "name": "rightIcon",
          "type": "FigmaDeclarativeNode",
          "required": false,
          "description": "The icon to the right of the button label."
        },
        {
          "name": "block",
          "type": "boolean",
          "required": false,
          "description": "If `true`, the button's width will be set to 'fill-parent'."
        },
        {
          "name": "onClick",
          "type": "() => void",
          "required": false,
          "description": "The click event of the button."
        }
      ]
    },
    {
      "name": "IconButton",
      "type": null,
      "properties": [
        {
          "name": "style",
          "type": "[ComponentStyle](#ComponentStyle)<[ButtonAnatomy](#ButtonAnatomy), [ButtonSize](#ButtonSize), [ButtonVariant](#ButtonVariant)>",
          "required": false,
          "description": "The style object including all IconButton parts."
        },
        {
          "name": "icon",
          "type": "FigmaDeclarativeNode",
          "required": false,
          "description": "The icon of the icon button."
        },
        {
          "name": "variant",
          "type": "[ButtonVariant](#ButtonVariant)",
          "required": false,
          "description": "The appearance of the icon button.",
          "defaultValue": "'filled'"
        },
        {
          "name": "colorScheme",
          "type": "[ButtonColorScheme](#ButtonColorScheme)",
          "required": false,
          "description": "Apply a preset color scheme to the icon button."
        },
        {
          "name": "size",
          "type": "[ButtonSize](#ButtonSize)",
          "required": false,
          "description": "The size of the icon button (T-shirt size).",
          "defaultValue": "'md'"
        },
        {
          "name": "disabled",
          "type": "boolean",
          "required": false,
          "description": "If 'true', the icon button and its events will be disabled."
        },
        {
          "name": "onClick",
          "type": "() => void",
          "required": false,
          "description": "The click event of the icon button."
        },
        {
          "name": "fontSize",
          "type": "TextProps['fontSize']",
          "required": false,
          "description": "The size of the inner icon of the icon button."
        }
      ]
    },
    {
      "name": "ComponentStyle",
      "type": "export type ComponentStyle<PartsStyle = Record<string, any>, Size extends string = string, Variant extends string = string> = {\n  baseStyle?: Partial<PartsStyle>;\n  sizes?: Partial<Record<Size, Partial<PartsStyle>>>;\n  variants?: Partial<Record<Variant, Partial<PartsStyle>>>;\n};\n",
      "properties": []
    },
    {
      "name": "ButtonAnatomy",
      "type": "export type ButtonAnatomy = {\n  container: AutoLayoutProps;\n  text: TextProps;\n  icon: Omit<SVGProps, 'src'>;\n};\n",
      "properties": []
    },
    {
      "name": "ButtonSize",
      "type": "export type ButtonSize = 'sm' | 'md' | 'lg';\n",
      "properties": []
    },
    {
      "name": "ButtonVariant",
      "type": "export type ButtonVariant = 'filled' | 'outline' | 'ghost';\n",
      "properties": []
    },
    {
      "name": "ButtonColorScheme",
      "type": "export type ButtonColorScheme = 'slate' | 'gray' | 'zinc' | 'neutral' | 'stone' | 'red' | 'orange' | 'amber' | 'yellow' | 'lime' | 'green' | 'emerald' | 'teal' | 'cyan' | 'sky' | 'blue' | 'indigo' | 'violet' | 'purple' | 'fuchsia' | 'pink' | 'rose';\n",
      "properties": []
    }
  ],
  "Avatar": [
    {
      "name": "Avatar",
      "type": null,
      "properties": [
        {
          "name": "style",
          "type": "[ComponentStyle](#ComponentStyle)<[AvatarAnatomy](#AvatarAnatomy)['avatar'], [AvatarSize](#AvatarSize)>",
          "required": false,
          "description": "The style object including all avatar parts."
        },
        {
          "name": "displayName",
          "type": "string",
          "required": false,
          "description": "If set, the fallback avatar will show the initials of the given name."
        },
        {
          "name": "src",
          "type": "string",
          "required": false,
          "description": "The source of the avatar. It can be Image URL/DataURI or an ImagePaint."
        },
        {
          "name": "size",
          "type": "[AvatarSize](#AvatarSize) | number",
          "required": false,
          "description": "The size of the avatar (T-shirt size)."
        },
        {
          "name": "fill",
          "type": "AutoLayoutProps['fill']",
          "required": false,
          "description": "The background color of the fallback avatar.",
          "defaultValue": "'md'"
        }
      ]
    },
    {
      "name": "ComponentStyle",
      "type": "export type ComponentStyle<PartsStyle = Record<string, any>, Size extends string = string, Variant extends string = string> = {\n  baseStyle?: Partial<PartsStyle>;\n  sizes?: Partial<Record<Size, Partial<PartsStyle>>>;\n  variants?: Partial<Record<Variant, Partial<PartsStyle>>>;\n};\n",
      "properties": []
    },
    {
      "name": "AvatarAnatomy",
      "type": "export interface AvatarAnatomy {\n  avatar: Omit<ElementProps, 'width' | 'height'> & {\n    width: number;\n    height: number;\n  };\n  avatarGroup: AutoLayoutProps;\n  excessLabel: ElementProps;\n}\n",
      "properties": []
    },
    {
      "name": "AvatarSize",
      "type": "export type AvatarSize = 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n",
      "properties": []
    }
  ],
  "Accordion": [
    {
      "name": "Accordion Item",
      "type": null,
      "properties": [
        {
          "name": "title",
          "type": "FigmaDeclarativeNode",
          "required": true,
          "description": "The title of the accordion item."
        },
        {
          "name": "content",
          "type": "FigmaDeclarativeNode",
          "required": true,
          "description": "The content of the accordion item."
        },
        {
          "name": "key",
          "type": "string | number",
          "required": true,
          "description": "The key of the accordion item."
        }
      ]
    },
    {
      "name": "Accordion",
      "type": null,
      "properties": [
        {
          "name": "style",
          "type": "[ComponentStyle](#ComponentStyle)<[AccordionAnatomy](#AccordionAnatomy)>",
          "required": false,
          "description": "The style object including all accordion parts."
        },
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "A unique identifier for the accordion."
        },
        {
          "name": "data",
          "type": "[AccordionItemProps](#AccordionItemProps)[]",
          "required": true,
          "description": "Accordion items."
        },
        {
          "name": "width",
          "type": "number | 'fill-parent'",
          "required": false,
          "description": "The width of the accordion."
        }
      ]
    },
    {
      "name": "ComponentStyle",
      "type": "export type ComponentStyle<PartsStyle = Record<string, any>, Size extends string = string, Variant extends string = string> = {\n  baseStyle?: Partial<PartsStyle>;\n  sizes?: Partial<Record<Size, Partial<PartsStyle>>>;\n  variants?: Partial<Record<Variant, Partial<PartsStyle>>>;\n};\n",
      "properties": []
    },
    {
      "name": "AccordionAnatomy",
      "type": "export interface AccordionAnatomy {\n  container: AutoLayoutProps;\n  item: AutoLayoutProps;\n  button: AutoLayoutProps;\n  chevronContainer: AutoLayoutProps;\n  chevron: Omit<SVGProps, 'src'> & {\n    color: string;\n  };\n  title: TextProps;\n  content: TextProps;\n  panel: AutoLayoutProps;\n}\n",
      "properties": []
    }
  ],
  "_field": [
    {
      "name": "Field",
      "type": null,
      "properties": [
        {
          "name": "style",
          "type": "[ComponentStyle](#ComponentStyle)<[FieldAnatomy](#FieldAnatomy), [FieldSize](#FieldSize), [FieldVariant](#FieldVariant)>",
          "required": false,
          "description": "The style object for all field parts."
        },
        {
          "name": "variant",
          "type": "[FieldVariant](#FieldVariant)",
          "required": false,
          "description": "The appearance of the field."
        },
        {
          "name": "size",
          "type": "[FieldSize](#FieldSize)",
          "required": false,
          "description": "The size of the field.",
          "defaultValue": "'md'"
        },
        {
          "name": "placeholder",
          "type": "string",
          "required": false,
          "description": "The content of the placeholder."
        },
        {
          "name": "elementLeft",
          "type": "FigmaDeclarativeNode",
          "required": false,
          "description": "The element on the left side of the field."
        },
        {
          "name": "elementRight",
          "type": "FigmaDeclarativeNode",
          "required": false,
          "description": "The element on the right side of the field."
        },
        {
          "name": "addonLeft",
          "type": "FigmaDeclarativeNode",
          "required": false,
          "description": "The addon on the left side of the field."
        },
        {
          "name": "addonRight",
          "type": "FigmaDeclarativeNode",
          "required": false,
          "description": "The addon on the right side of the field."
        },
        {
          "name": "disabled",
          "type": "boolean",
          "required": false,
          "description": "If 'true', the field is disabled."
        }
      ]
    },
    {
      "name": "ComponentStyle",
      "type": "export type ComponentStyle<PartsStyle = Record<string, any>, Size extends string = string, Variant extends string = string> = {\n  baseStyle?: Partial<PartsStyle>;\n  sizes?: Partial<Record<Size, Partial<PartsStyle>>>;\n  variants?: Partial<Record<Variant, Partial<PartsStyle>>>;\n};\n",
      "properties": []
    },
    {
      "name": "FieldAnatomy",
      "type": "export interface FieldAnatomy {\n  field: AutoLayoutProps;\n  input: AutoLayoutProps;\n  text: TextProps;\n  clearIcon: Omit<SVGProps, 'src' | 'fill'> & {\n    color: string;\n  };\n  leftAddon: AutoLayoutProps;\n  rightAddon: AutoLayoutProps;\n  element: AutoLayoutProps;\n}\n",
      "properties": []
    },
    {
      "name": "FieldSize",
      "type": "type FieldSize = 'xs' | 'sm' | 'md' | 'lg';\n",
      "properties": []
    },
    {
      "name": "FieldVariant",
      "type": "type FieldVariant = 'filled' | 'outline' | 'flush';\n",
      "properties": []
    }
  ]
}